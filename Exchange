import heapq
import sqlite3
from datetime import datetime
import time
import asyncio
from flask import Flask, request, jsonify

class DataBase:
  def __init__(self, database_file="MUNI_EXCHANGE.db"):
    self.connection = sqlite3.connect(database_file)
    self.cursor = self.connection.cursor()
    self.create_tables()

  def create_tables(self):
    self.cursor.execute(
        '''CREATE TABLE IF NOT EXISTS users (
          user_id TEXT,
          created_at TEXT
        )'''
    )

    self.cursor.execute(
        '''CREATE TABLE IF NOT EXISTS portfolios (
          user_id TEXT,
          cusip TEXT,
          par INTEGER
        )'''
    )

    self.cursor.execute(
        '''CREATE TABLE IF NOT EXISTS cash (
          user_id TEXT,
          cash REAL
        )'''
    )

    self.cursor.execute(
        '''CREATE TABLE IF NOT EXISTS orders (
          user_id TEXT,
          order_id INTEGER,
          order_type TEXT,
          cusip TEXT,
          price REAL,
          par INTEGER,
          side TEXT
        )'''
    )

    self.cursor.execute(
        '''CREATE TABLE IF NOT EXISTS trades (
          buyer_id TEXT,
          seller_id TEXT,
          price REAL,
          par INTEGER,
          cusip TEXT,
          time_of_trade TEXT
        )'''
    )

    self.cursor.execute(
        '''CREATE TABLE IF NOT EXISTS notifications (
          user_id TEXT,
          cusip TEXT
    )'''
    )

  def update_users(self, user_id):
    time = datetime.now()
    self.cursor.execute("INSERT INTO users (user_id, created_at) VALUES (?, ?)", (user_id, time))
    self.connection.commit()

  def update_portfolio(self, user_id, cusip, par):
    self.cursor.execute("SELECT user_id, cusip FROM portfolios WHERE user_id = ? and cusip = ?", (user_id, cusip))
    result = self.cursor.fetchall()
    print(result)
    if result:
      self.cursor.execute("UPDATE portfolios SET par = par + ? WHERE user_id = ? AND cusip = ?", (par, user_id, cusip))
    else:
      self.cursor.execute("INSERT INTO portfolios (user_id, cusip, par) VALUES (?, ?, ?)", (user_id, cusip, par))

    self.connection.commit()

  def update_cash(self, user_id, cash):
    self.cursor.execute("SELECT user_id, cash FROM cash WHERE user_id = ?", (user_id,))
    result = self.cursor.fetchone()
    if result:
      self.cursor.execute("UPDATE cash SET cash = cash + ? WHERE user_id = ?", (cash, user_id))
    else:
      self.cursor.execute("INSERT INTO cash (user_id, cash) VALUES (?, ?)", (user_id, cash))

    self.connection.commit()

  def update_orders(self, user_id, order_id, order_type, cusip, price, par, side):
    self.cursor.execute("INSERT INTO orders (user_id, order_id, order_type, cusip, price, par, side) VALUES (?, ?, ?, ?, ?, ?, ?)", (user_id, order_id, order_type, cusip, price, par, side))
    self.connection.commit()

  def cancel_orders(self, user_id, order_id):
    self.cursor.execute("DELETE FROM orders WHERE user_id = ? AND order_id = ?", (user_id, order_id))
    self.connection.commit()

  def update_trades(self, buyer_id, seller_id, cusip, price, par):
    time = datetime.now()
    self.cursor.execute("INSERT INTO trades (buyer_id, seller_id, cusip, price, par, time_of_trade) VALUES (?, ?, ?, ?, ?, ?)", (buyer_id, seller_id, cusip, price, par, time))
    self.connection.commit()

  def update_notifications(self, user_id, cusip):
    self.cursor.execute("INSERT INTO notifications (user_id, cusip) VALUES (?, ?)", (user_id, cusip))
    self.connection.commit()

  def check_ns(self, user_id, cusip):
    self.cursor.execute("SELECT user_id, cusip FROM notifications WHERE user_id = ? AND cusip = ?", (user_id, cusip))
    results = self.cursor.fetchall()
    return results

class Notification:
  def __init__(self, user_id, cusip):
    self.cusip = cusip
    self.user_id = user_id

class MatchNotifications:
  def __init__(self, db):
    self.db = db
    self.notifications = []

  def create_notification(self, user_id, cusip):
    notification = Notification(user_id, cusip)
    db.update_notifications(user_id=user_id, cusip=cusip)
    self.notifications.append((notification.user_id, notification.cusip))

  def check_notification(self, user_id, cusip):
    results = db.check_ns(user_id=user_id, cusip=cusip)
    if (user_id, cusip) in results:
      return "A notifitcation exists for this cusip"

class Order:
  def __init__(self, order_id, order_type, par, cusip, price, side, user_id):
    self.order_id = order_id
    self.order_type = order_type
    self.par = par
    self.cusip = cusip
    self.price = price
    self.side = side
    self.user_id = user_id

class UserPortfolio:
  def __init__(self, user_id, portfolio=None):
    self.user_id = user_id
    self.portfolio = portfolio if portfolio is not None else {}

  def update_portfolio(self, cusip, par, user_id):
    if cusip not in self.portfolio:
      self.portfolio[cusip] = 0
    self.portfolio[cusip] += par
    #for i in self.portfolio:
    #  if i != 'cash':
    #    db.update_portfolio(user_id=user_id, cusip=cusip, par=self.portfolio[i])
    db.update_portfolio(user_id, cusip, par)

  def has_sufficient_par(self, cusip, par):
    return self.portfolio[cusip] >= par

  def updated_cash(self, price, par, user_id):
    self.portfolio['cash'] += par * (price/100)
    #db.update_cash(user_id=user_id, cash=self.portfolio['cash'])

  def has_sufficient_cash(self, price, par, cash):
    return cash >= par * (price/100)

class MatchingEngine:
  def __init__(self, db):
    self.db = db
    self.buy_orders = []
    self.sell_orders = []
    self.order_counter_id = 1
    self.trade_history = []
    self.users = {}
    self.order_map = {}

  def add_user(self, user_id, portfolio):
    if user_id not in self.users:
      self.users[user_id] = UserPortfolio(user_id, portfolio)
      db.update_users(user_id=user_id)
      for i in self.users[user_id].portfolio:
        if i != 'cash':
          db.update_portfolio(user_id=user_id, cusip=i, par=self.users[user_id].portfolio[i])
        else:
          break
      db.update_cash(user_id=user_id, cash=self.users[user_id].portfolio['cash'])
    else:
      print("This user already exists")


  def add_order(self, order_type, par, cusip, price, side, user_id):
    order = Order(order_id=self.order_counter_id, par=par, cusip=cusip, price=price, side=side, user_id=user_id, order_type=order_type)
    db.update_orders(user_id=user_id, order_id=self.order_counter_id, order_type=order_type, cusip=cusip, price=price, par=par, side=side)
    self.order_counter_id += 1
    self.order_map[order.order_id] = order
    print(self.order_map)
    print(order)

    cash = self.users[user_id].portfolio['cash']
    #print(cash)

    if order.side == "sell" and self.users[user_id].has_sufficient_par(cusip, par) == False:
      print("Insufficient Par to Place a Sell Order")
    else:
      print("Sufficient ")

    if order.side == 'buy' and self.users[user_id].has_sufficient_cash(par, price, cash) == False:
      print("Insuffient Cash to Place a Buy Order")
    else:
      print("Sufficient Cash Available")


    if order.order_type == 'limit':
      self._process_limit_order(order, cusip)

    elif order.order_type == 'market':
      self._process_market_order(order, cusip)

  def cancel_sell_order(self, user_id, order_id):
    db.cancel_orders(user_id=user_id, order_id=order_id)
    for item in self.sell_orders:
      if item[1] == order_id:
        self.sell_orders.remove(item)
        break

    print(self.sell_orders)


  def _process_limit_order(self, order, cusip):

    if order.par > 0:
      if order.side == "buy":
        heapq.heappush(self.buy_orders, (-order.price, order.order_id, order))

      elif order.side == "sell":
        heapq.heappush(self.sell_orders, (order.price, order.order_id, order))


    self._match_limit_order(order, cusip)
    print(self.sell_orders)

  def _match_limit_order(self, incoming_order, cusip):
    if incoming_order.side == "buy":
      while incoming_order.par > 0 and self.sell_orders:
        best_sell_price, _, best_sell_order = self.sell_orders[0]

        if best_sell_order.par == 0:
          heapq.heappop(self.sell_orders)
          continue

        if incoming_order.price < best_sell_price:
          break

        if (incoming_order.par == best_sell_order.par and
            incoming_order.price == best_sell_order.price):

          self._execute_market_order(incoming_order, best_sell_order, cusip)

        else:
          break


    elif incoming_order.side == "sell":
      while incoming_order.par > 0 and self.buy_orders:
        best_buy_price, _, best_buy_order = self.buy_orders[0]
        best_buy_price = -best_buy_price

        if best_buy_order.par == 0:
          heapq.heappop(self.buy_orders)
          continue

        if incoming_order.price > best_buy_price:
          break

        if (incoming_order.par == best_buy_order.par and
            incoming_order.price == best_buy_order.price):

          self._execute_market_order(incoming_order, best_buy_order, cusip)

        else:
          break



  def _process_market_order(self, order, cusip):
    self._match_market_order(order, cusip)

    if order.par > 0:
      if order.side == "buy":
        heapq.heappush(self.buy_orders, (-order.price, order.order_id, order))
      elif order.side == "sell":
        heapq.heappush(self.sell_orders, (order.price, order.order_id, order))


  def _match_market_order(self, incoming_order, cusip):
    if incoming_order.side == "buy":
      while incoming_order.par > 0 and self.sell_orders:
        best_sell_price, _, best_sell_order = self.sell_orders[0]

        if best_sell_order.par == 0:
          heapq.heappop(self.sell_orders)  # Remove from heap
          continue

        if incoming_order.price < best_sell_price:
          break

        self._execute_market_order(incoming_order, best_sell_order, cusip)

    elif incoming_order.side == "sell":
      while incoming_order.par > 0 and self.buy_orders:
        best_buy_price, _, best_buy_order = self.buy_orders[0]
        best_buy_price = -best_buy_price  # Convert back to positive

        if best_buy_order.par == 0:
          heapq.heappop(self.buy_orders)  # Remove from heap
          continue

        if incoming_order.price > best_buy_price:
          break

        self._execute_market_order(incoming_order, best_buy_order, cusip)

  def _execute_market_order(self, incoming_order, counter_order, cusip):

    if incoming_order.par == 0 or counter_order.par == 0:
      return

    trade_par = min(incoming_order.par, counter_order.par)
    incoming_order.par -= trade_par
    counter_order.par -= trade_par


    trade_price = counter_order.price if incoming_order.side == "buy" else incoming_order.price

    # Log trade
    trade = {
            "buyer": incoming_order.user_id if incoming_order.side == "buy" else counter_order.user_id,
            "seller": counter_order.user_id if incoming_order.side == "buy" else incoming_order.user_id,
            "price": trade_price,
            "par": trade_par,
            "cusip": cusip
        }
    self.trade_history.append(trade)
    db.update_trades(buyer_id=self.users[trade["buyer"]].user_id, seller_id=self.users[trade['seller']].user_id, cusip=cusip, price=trade_price, par=trade_par)
    print(f"Trade Executed: {trade}")

    # Update portfolios
    buyer = self.users[trade["buyer"]]
    seller = self.users[trade["seller"]]
    buyer.update_portfolio(cusip, trade_par, buyer.user_id)
    seller.update_portfolio(cusip, -trade_par, seller.user_id)
    #db.update_portfolio(user_id=buyer.user_id, cusip=cusip, par=trade_par)
    #db.update_portfolio(user_id=seller.user_id, cusip=cusip, par=-trade_par)
    buyer.updated_cash(price=trade_price, par=-trade_par, user_id=buyer.user_id)
    seller.updated_cash(price=trade_price, par=trade_par, user_id=seller.user_id)
    db.update_cash(user_id=buyer.user_id, cash=-trade_par*(trade_price/100))
    db.update_cash(user_id=seller.user_id, cash=trade_par*(trade_price/100))

    if counter_order.par == 0:
      if counter_order.side == "sell":
        heapq.heappop(self.sell_orders)
      elif counter_order.side == "buy":
        heapq.heappop(self.buy_orders)

  def print_user_portfolio(self, user_id):
    if user_id in self.users:
      user = self.users[user_id]
      print(f"Portfolio for User {user_id}: {user.portfolio}")
    else:
      print(f"User {user_id} does not exist.")


  def print_order_book(self):
    print("\nOrder Book:")

    print("Buy Orders:")
    for price, _, order in sorted(self.buy_orders, reverse=True):
      if order.par != 0:
        print(f" {order}")


    print("Sell Orders:")
    for price, _, order in sorted(self.sell_orders):
      if order.par != 0:
        print(f"  {order.par}")

  def print_trade_history(self):
    print("\nTrade History:")
    for trade in self.trade_history:
      print(trade)

class DutchAuction:
  def __init__(self, auction_id, user_id, cusip, par, start_price, reserve_price, price_step, current_price, timestep):
    self.user_id = user_id
    self.cusip = cusip
    self.par = par
    self.start_price = start_price
    self.reserve_price = reserve_price
    self.price_step = price_step
    self.auction_id = auction_id
    self.current_price = start_price
    self.timestep = timestep

class Bid:
  def __init__(self, user_id, price, auction_id):
    self.user_id = user_id
    self.price = price
    self.auction_id = auction_id

class MatchingAuction:
  def __init__(self, db):
    self.db = db
    self.active_auctions = {}
    self.bids = []
    #self.bids_user_id = []
    self.auction_counter_id = 1
    self.id_matches = []

  def create_auction(self, user_id, cusip, par, start_price, reserve_price, price_step, current_price, timestep):
    auction = DutchAuction(auction_id=self.auction_counter_id, user_id=user_id, cusip=cusip, par=par, start_price=start_price, reserve_price=reserve_price, price_step=price_step, current_price=start_price, timestep=timestep)
    self.active_auctions[auction.auction_id] = auction
    self.auction_counter_id += 1
    #self._update_auction()

  def place_bid(self, user_id, auction_id, price):
    bid = Bid(user_id=user_id, auction_id=auction_id, price=price)
    #auction = self.active_auctions[auction_id]
    heapq.heappush(self.bids, (bid.price, bid.auction_id, bid.user_id))
    heapq.heapify(self.bids)
    #heapq.heappush(self.bids_user_id, (bid.user_id, bid.auction_id))

    self._match_bid(auction_id=auction_id)



  def _update_auction(self):
    for i in self.active_auctions.items():
      print(i)
      auction = i[1]
      print(auction.current_price)
      time.sleep(5)
      if auction.current_price <= auction.reserve_price:
        break
      elif auction.current_price == self._match_bid(auction.auction_id)[0] and auction.auction_id == self._match_bid(auction.auction_id)[2]:


        #Update Portfolios
        seller_id = auction.user_id
        buyer_id = self._match_bid(auction.auction_id)[1]
        cusip = auction.cusip
        par = auction.par
        seller = engine.users[seller_id]
        buyer = engine.users[buyer_id]
        seller.update_portfolio(cusip=cusip, par=-par, user_id=seller.user_id)
        buyer.update_portfolio(cusip=cusip, par=par, user_id=buyer.user_id)
        db.update_cash(user_id=seller.user_id, cash=par*(self._match_bid(auction.auction_id)[0]/100))
        db.update_cash(user_id=buyer.user_id, cash=-par*(self._match_bid(auction.auction_id)[0]/100))
        self.active_auctions.pop(auction.auction_id)
        print(f"For {auction.auction_id}, the bond with cusip {auction.cusip} sold at a price of {auction.current_price}")
        print(self.active_auctions)
        if self.active_auctions:
          self._update_auction()
        else:
          break
        #print(auction.current_price)
      else:
        print("No bid has been matched")
        auction.current_price -= auction.price_step
        self._update_auction()

  def _match_bid(self, auction_id):
    for i in self.bids:
      if auction_id in i:
        self.id_matches.append(i)

    largest = heapq.nlargest(1, self.id_matches)
    best_buy_price, id, user = largest[0]
    self.id_matches.clear()
    return best_buy_price, user, id

class MatchingAuction_ASYNC:
  def __init__(self, db):
    self.db = db
    self.active_auctions = {}
    self.bids = []
    #self.bids_user_id = []
    self.auction_counter_id = 1
    self.id_matches = []
    self.lock = asyncio.Lock()

  def create_auction(self, user_id, cusip, par, start_price, reserve_price, price_step, current_price, timestep):
    auction = DutchAuction(auction_id=self.auction_counter_id, user_id=user_id, cusip=cusip, par=par, start_price=start_price, reserve_price=reserve_price, price_step=price_step, current_price=start_price, timestep=timestep)
    self.active_auctions[auction.auction_id] = auction
    self.auction_counter_id += 1
    #self._update_auction()

  async def place_bid(self, user_id, auction_id, price):
    bid = Bid(user_id=user_id, auction_id=auction_id, price=price)
    #auction = self.active_auctions[auction_id]
    heapq.heappush(self.bids, (bid.price, bid.auction_id, bid.user_id))
    heapq.heapify(self.bids)
    #heapq.heappush(self.bids_user_id, (bid.user_id, bid.auction_id))

    await self._match_bid(auction_id=auction_id)



  async def _update_auction(self):
    while self.active_auctions:

    #for i in self.active_auctions.items():
      for auction_id, auction in list(self.active_auctions.items()):
        #auction = i[1]
        await asyncio.sleep(5)
        match_result = await self._match_bid(auction_id)
        best_buy_price, user, id = match_result
        if auction.current_price <= auction.reserve_price:
          del self.active_auctions[auction.auction_id]
          continue
        elif auction.current_price == best_buy_price and auction.auction_id == id:
          print(f"For auction {auction_id}, the bond with cusip {auction.cusip} sold at a price of {auction.current_price}")

          #Update Portfolios
          seller_id = auction.user_id
          buyer_id = user
          cusip = auction.cusip
          par = auction.par
          seller = engine.users[seller_id]
          buyer = engine.users[buyer_id]
          seller.update_portfolio(cusip=cusip, par=-par, user_id=seller.user_id)
          buyer.update_portfolio(cusip=cusip, par=par, user_id=buyer.user_id)
          db.update_cash(user_id=seller.user_id, cash=par*(best_buy_price/100))
          db.update_cash(user_id=buyer.user_id, cash=-par*(best_buy_price/100))
          print(auction.auction_id)
          del self.active_auctions[auction.auction_id]
          await asyncio.sleep(2)
          if self.active_auctions:
            continue
          else:
            break
          #print(auction.current_price)
        else:
          print("No bid has been matched")
          auction.current_price -= auction.price_step
          #await self._update_auction()
    await asyncio.sleep(3)

  async def _match_bid(self, auction_id):
    bids = [self._process_bid(auction_id)]
    m_bids = await asyncio.gather(*bids)
    self.id_matches = [m_bid for m_bid in m_bids if m_bids is not None]
    #for bid in self.bids:
    #  if auction_id in bid:
    #    self.id_matches.append(asyncio.gather(self._process_bid(bid)))

    if self.id_matches:
      largest = heapq.nlargest(1, self.id_matches)
      best_buy_price, id, user = largest[0]
      self.id_matches.clear()
      return best_buy_price, user, id
    else:
      return None

  async def _process_bid(self, auction_id):
    for bid in self.bids:
      if auction_id in bid:
        return bid

#################################################################################### APIs ###################################################################################
app = Flask(__name__)


@app.route("/add_user", methods=['POST'])
def add_user():
  data = request.get_json()
  user_id = data['user_id']
  portfolio = data['portfolio']
  engine.add_user(user_id=user_id, portfolio=portfolio)
  return jsonify({'user_id': user_id, 'portfolio': portfolio})


@app.route("/add_order", methods=['POST'])
def add_order():
  data = request.get_json()
  user_id = data['user_id']
  order_type = data['order_type']
  par = data['par']
  cusip = data['cusip']
  price = data['price']
  side = data['side']
  engine.add_order(user_id=user_id, order_type=order_type, par=par, cusip=cusip, price=price, side=side)
  return jsonify({'user_id': user_id, 'order_type': order_type, 'par': par, 'cusip': cusip, 'price': price, 'side': side})
